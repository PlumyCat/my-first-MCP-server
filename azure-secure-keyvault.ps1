#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Script de s√©curisation Azure AD avec Key Vault pour le container MCP Weather
.DESCRIPTION
    Version ultra-s√©curis√©e qui utilise Azure Key Vault pour stocker les secrets
    au lieu de les passer en variables d'environnement
.PARAMETER ResourceGroupName
    Nom du groupe de ressources Azure
.PARAMETER ContainerInstanceName
    Nom de l'instance de conteneur √† s√©curiser
.PARAMETER ContainerRegistryName
    Nom du registre de conteneurs Azure
.PARAMETER KeyVaultName
    Nom du Key Vault Azure (sera cr√©√© s'il n'existe pas)
.PARAMETER TenantId
    Azure AD Tenant ID
.PARAMETER ClientId
    Azure AD Client ID (Application ID)
.PARAMETER ClientSecret
    Azure AD Client Secret (sera stock√© dans Key Vault)
.EXAMPLE
    .\azure-secure-keyvault.ps1 -ContainerRegistryName "mcpweather2024" -KeyVaultName "mcp-weather-kv" -TenantId "your-tenant-id" -ClientId "your-client-id" -ClientSecret "your-secret"
#>

param(
    [Parameter(Mandatory=$false)]
    [string]$ResourceGroupName = "mcp-weather-rg",
    
    [Parameter(Mandatory=$false)]
    [string]$ContainerInstanceName = "mcp-weather-server",
    
    [Parameter(Mandatory=$true)]
    [string]$ContainerRegistryName,
    
    [Parameter(Mandatory=$true)]
    [string]$KeyVaultName,
    
    [Parameter(Mandatory=$true)]
    [string]$TenantId,
    
    [Parameter(Mandatory=$true)]
    [string]$ClientId,
    
    [Parameter(Mandatory=$true)]
    [string]$ClientSecret,
    
    [Parameter(Mandatory=$false)]
    [string]$ImageTag = "secure-kv"
)

# Configuration des couleurs pour les messages
$ErrorActionPreference = "Stop"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Write-Step {
    param([string]$Message)
    Write-ColorOutput "üîÑ $Message" "Cyan"
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è  $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è  $Message" "Blue"
}

# En-t√™te
Write-ColorOutput "üîêüîë S√©curisation Azure AD + Key Vault - MCP Weather Server" "Magenta"
Write-ColorOutput "==========================================================" "Magenta"

# V√©rification de la connexion Azure
Write-Step "V√©rification de la connexion Azure..."
try {
    $account = az account show --output json | ConvertFrom-Json
    Write-Success "Connect√© √† Azure avec: $($account.user.name)"
} catch {
    Write-Error "Vous n'√™tes pas connect√© √† Azure. Ex√©cutez 'az login' pour vous connecter."
    exit 1
}

# Variables d√©riv√©es
$acrLoginServer = "$ContainerRegistryName.azurecr.io"
$imageName = "$acrLoginServer/mcp-weather-server"
$secureImageName = "$imageName`:$ImageTag"

Write-ColorOutput "`nüìã Configuration de s√©curisation avec Key Vault:" "Yellow"
Write-ColorOutput "  ‚Ä¢ Groupe de ressources: $ResourceGroupName" "White"
Write-ColorOutput "  ‚Ä¢ Instance de conteneur: $ContainerInstanceName" "White"
Write-ColorOutput "  ‚Ä¢ Registre: $ContainerRegistryName" "White"
Write-ColorOutput "  ‚Ä¢ Key Vault: $KeyVaultName" "White"
Write-ColorOutput "  ‚Ä¢ Image s√©curis√©e: $secureImageName" "White"
Write-ColorOutput "  ‚Ä¢ Azure AD Tenant: $TenantId" "White"
Write-ColorOutput "  ‚Ä¢ Azure AD Client: $ClientId" "White"

# √âtape 1: Cr√©er ou v√©rifier le Key Vault
Write-Step "Cr√©ation/v√©rification du Key Vault '$KeyVaultName'..."
try {
    $kvExists = az keyvault show --name $KeyVaultName --resource-group $ResourceGroupName --output none 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Key Vault '$KeyVaultName' existe d√©j√†"
    } else {
        Write-Info "Cr√©ation du Key Vault '$KeyVaultName'..."
        az keyvault create --name $KeyVaultName --resource-group $ResourceGroupName --location "West Europe" --output none
        Write-Success "Key Vault '$KeyVaultName' cr√©√© avec succ√®s"
    }
} catch {
    Write-Error "Erreur lors de la cr√©ation du Key Vault: $_"
    exit 1
}

# √âtape 2: Stocker les secrets dans Key Vault
Write-Step "Stockage des secrets Azure AD dans Key Vault..."
try {
    # Stocker le client secret
    az keyvault secret set --vault-name $KeyVaultName --name "azure-ad-client-secret" --value $ClientSecret --output none
    Write-Success "Client Secret stock√© dans Key Vault"
    
    # Stocker les autres informations (non sensibles mais centralis√©es)
    az keyvault secret set --vault-name $KeyVaultName --name "azure-ad-tenant-id" --value $TenantId --output none
    az keyvault secret set --vault-name $KeyVaultName --name "azure-ad-client-id" --value $ClientId --output none
    Write-Success "Configuration Azure AD stock√©e dans Key Vault"
    
} catch {
    Write-Error "Erreur lors du stockage des secrets: $_"
    exit 1
}

# √âtape 3: Cr√©er une identit√© manag√©e pour le container
Write-Step "Configuration de l'identit√© manag√©e..."
try {
    # Cr√©er une identit√© manag√©e assign√©e par l'utilisateur
    $identityName = "$ContainerInstanceName-identity"
    
    $identityExists = az identity show --name $identityName --resource-group $ResourceGroupName --output none 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Identit√© manag√©e '$identityName' existe d√©j√†"
    } else {
        az identity create --name $identityName --resource-group $ResourceGroupName --output none
        Write-Success "Identit√© manag√©e '$identityName' cr√©√©e"
    }
    
    # R√©cup√©rer les informations de l'identit√©
    $identity = az identity show --name $identityName --resource-group $ResourceGroupName --output json | ConvertFrom-Json
    $identityId = $identity.id
    $principalId = $identity.principalId
    
    Write-Info "Identity ID: $identityId"
    Write-Info "Principal ID: $principalId"
    
} catch {
    Write-Error "Erreur lors de la cr√©ation de l'identit√© manag√©e: $_"
    exit 1
}

# √âtape 4: Donner acc√®s au Key Vault √† l'identit√© manag√©e
Write-Step "Configuration des permissions Key Vault..."
try {
    # Attendre un peu que l'identit√© soit propag√©e
    Start-Sleep -Seconds 10
    
    # Donner les permissions de lecture des secrets
    az keyvault set-policy --name $KeyVaultName --object-id $principalId --secret-permissions get list --output none
    Write-Success "Permissions Key Vault configur√©es pour l'identit√© manag√©e"
    
} catch {
    Write-Error "Erreur lors de la configuration des permissions: $_"
    exit 1
}

# √âtape 5: Cr√©er un Dockerfile s√©curis√© (sans secrets)
Write-Step "Construction de l'image Docker ultra-s√©curis√©e..."
try {
    $secureDockerfile = @"
# Image ultra-s√©curis√©e bas√©e sur l'image existante
FROM $imageName`:latest

# Installation des d√©pendances pour Azure Key Vault
RUN pip install azure-keyvault-secrets azure-identity

# Variables d'environnement non sensibles seulement
ENV MCP_SECURE_MODE=true
ENV AZURE_KEY_VAULT_NAME=$KeyVaultName
ENV USE_MANAGED_IDENTITY=true

# Note: Tous les secrets sont r√©cup√©r√©s depuis Key Vault au runtime
# Aucun secret n'est stock√© dans l'image Docker

# R√©exposer le port
EXPOSE 8000

# Commande par d√©faut (inchang√©e)
CMD ["python", "-m", "src.main"]
"@

    $secureDockerfile | Out-File -FilePath "Dockerfile.secure-kv" -Encoding UTF8
    
    # Construire la nouvelle image
    docker build -f Dockerfile.secure-kv -t $secureImageName .
    Write-Success "Image Docker ultra-s√©curis√©e construite"
    
    # Nettoyer le Dockerfile temporaire
    Remove-Item "Dockerfile.secure-kv" -Force
    
} catch {
    Write-Error "Erreur lors de la construction de l'image s√©curis√©e: $_"
    exit 1
}

# √âtape 6: Pousser l'image vers ACR
Write-Step "Push de l'image ultra-s√©curis√©e vers Azure Container Registry..."
try {
    az acr login --name $ContainerRegistryName
    docker push $secureImageName
    Write-Success "Image ultra-s√©curis√©e pouss√©e vers ACR"
} catch {
    Write-Error "Erreur lors du push: $_"
    exit 1
}

# √âtape 7: Supprimer l'ancien container
Write-Step "Suppression de l'ancien container..."
try {
    az container delete --resource-group $ResourceGroupName --name $ContainerInstanceName --yes --output none 2>$null
    Write-Success "Ancien container supprim√©"
    Start-Sleep -Seconds 10
} catch {
    Write-Warning "Ancien container non trouv√© ou d√©j√† supprim√©"
}

# √âtape 8: D√©ployer le container ultra-s√©curis√© avec identit√© manag√©e
Write-Step "D√©ploiement du container ultra-s√©curis√© avec Key Vault..."
try {
    $acrCredentials = az acr credential show --name $ContainerRegistryName --output json | ConvertFrom-Json
    $acrUsername = $acrCredentials.username
    $acrPassword = $acrCredentials.passwords[0].value
    
    $deployResult = az container create `
        --resource-group $ResourceGroupName `
        --name $ContainerInstanceName `
        --image $secureImageName `
        --registry-login-server $acrLoginServer `
        --registry-username $acrUsername `
        --registry-password $acrPassword `
        --cpu 1 `
        --memory 1 `
        --os-type Linux `
        --restart-policy Always `
        --assign-identity $identityId `
        --environment-variables PYTHONUNBUFFERED=1 PYTHONPATH=/app MCP_SECURE_MODE=true AZURE_KEY_VAULT_NAME=$KeyVaultName USE_MANAGED_IDENTITY=true `
        --ports 8000 `
        --protocol TCP `
        --dns-name-label $ContainerInstanceName `
        --output json 2>&1
    
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Erreur lors du d√©ploiement ultra-s√©curis√©: $deployResult"
        exit 1
    }
    
    Write-Success "Container ultra-s√©curis√© d√©ploy√© avec succ√®s"
} catch {
    Write-Error "Erreur lors du d√©ploiement ultra-s√©curis√©: $_"
    exit 1
}

# √âtape 9: V√©rifier le d√©ploiement
Write-Step "V√©rification du d√©ploiement ultra-s√©curis√©..."
try {
    Start-Sleep -Seconds 15
    
    $containerInfo = az container show --resource-group $ResourceGroupName --name $ContainerInstanceName --output json | ConvertFrom-Json
    
    if (-not $containerInfo) {
        Write-Error "Impossible de r√©cup√©rer les informations du container"
        exit 1
    }
    
    $publicIP = $containerInfo.ipAddress.ip
    $fqdn = $containerInfo.ipAddress.fqdn
    $state = $containerInfo.instanceView.currentState.state
    
    Write-Success "Container ultra-s√©curis√© d√©ploy√© et op√©rationnel!"
    
    Write-ColorOutput "`nüîêüîë Informations du d√©ploiement ultra-s√©curis√©:" "Green"
    Write-ColorOutput "===============================================" "Green"
    Write-ColorOutput "  ‚Ä¢ Nom de l'instance: $ContainerInstanceName" "White"
    Write-ColorOutput "  ‚Ä¢ √âtat: $state" "White"
    Write-ColorOutput "  ‚Ä¢ Adresse IP publique: $publicIP" "White"
    if ($fqdn) {
        Write-ColorOutput "  ‚Ä¢ FQDN: $fqdn" "White"
        Write-ColorOutput "  ‚Ä¢ URL ultra-s√©curis√©e: https://$fqdn`:8000" "White"
    }
    Write-ColorOutput "  ‚Ä¢ Mode ultra-s√©curis√©: ‚úÖ ACTIV√â" "Green"
    Write-ColorOutput "  ‚Ä¢ Key Vault: $KeyVaultName" "Green"
    Write-ColorOutput "  ‚Ä¢ Identit√© manag√©e: $identityName" "Green"
    Write-ColorOutput "  ‚Ä¢ Secrets: üîí STOCK√âS DANS KEY VAULT" "Green"
    
} catch {
    Write-Error "Erreur lors de la v√©rification: $_"
    exit 1
}

Write-ColorOutput "`nüîí S√©curit√© ultra-renforc√©e activ√©e:" "Green"
Write-ColorOutput "====================================" "Green"
Write-ColorOutput "‚úÖ Authentification Azure AD activ√©e" "Green"
Write-ColorOutput "‚úÖ Secrets stock√©s dans Azure Key Vault" "Green"
Write-ColorOutput "‚úÖ Identit√© manag√©e pour l'acc√®s aux secrets" "Green"
Write-ColorOutput "‚úÖ Aucun secret dans l'image Docker" "Green"
Write-ColorOutput "‚úÖ Aucun secret dans les variables d'environnement" "Green"
Write-ColorOutput "‚úÖ Logs conformes RGPD" "Green"
Write-ColorOutput "‚úÖ Validation des tokens JWT" "Green"
Write-ColorOutput "‚úÖ Gestion des r√¥les utilisateur" "Green"
Write-ColorOutput "‚úÖ Conformit√© aux standards de s√©curit√© enterprise" "Green"

Write-ColorOutput "`nüõ†Ô∏è  Commandes de gestion:" "Yellow"
Write-ColorOutput "=========================" "Yellow"
Write-ColorOutput "Voir les logs:" "White"
Write-ColorOutput "  az container logs --resource-group $ResourceGroupName --name $ContainerInstanceName --follow" "Gray"
Write-ColorOutput ""
Write-ColorOutput "G√©rer les secrets Key Vault:" "White"
Write-ColorOutput "  az keyvault secret list --vault-name $KeyVaultName --output table" "Gray"
Write-ColorOutput "  az keyvault secret show --vault-name $KeyVaultName --name azure-ad-client-secret" "Gray"
Write-ColorOutput ""
Write-ColorOutput "V√©rifier l'identit√© manag√©e:" "White"
Write-ColorOutput "  az identity show --name $identityName --resource-group $ResourceGroupName" "Gray"

Write-ColorOutput "`nüéâ D√©ploiement ultra-s√©curis√© termin√© avec succ√®s!" "Green"
Write-ColorOutput "Votre serveur MCP Weather utilise maintenant les meilleures pratiques de s√©curit√© Azure!" "Green" 