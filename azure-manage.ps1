#!/usr/bin/env pwsh
# Script de gestion Azure pour MCP Weather Server
# Auteur: Assistant IA
# Date: $(Get-Date -Format "yyyy-MM-dd")

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("status", "logs", "restart", "stop", "start", "delete", "url")]
    [string]$Action,
    
    [string]$ResourceGroup = "mcp-weather-rg",
    [string]$ContainerName = "mcp-weather-server",
    [int]$LogLines = 50,
    [switch]$Follow
)

# Configuration des couleurs pour les messages
$Colors = @{
    Success = "Green"
    Warning = "Yellow" 
    Error = "Red"
    Info = "Cyan"
    Header = "Magenta"
}

function Write-ColorMessage {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Colors[$Color]
}

function Write-Header {
    param([string]$Title)
    Write-Host ""
    Write-ColorMessage "=" * 50 -Color "Header"
    Write-ColorMessage $Title -Color "Header"
    Write-ColorMessage "=" * 50 -Color "Header"
}

function Test-ContainerExists {
    try {
        $container = az container show --resource-group $ResourceGroup --name $ContainerName --output json 2>$null
        if ($container) {
            return $container | ConvertFrom-Json
        }
        return $null
    }
    catch {
        return $null
    }
}

function Get-ContainerStatus {
    Write-Header "üìä √âTAT DU CONTENEUR"
    
    $container = Test-ContainerExists
    if (-not $container) {
        Write-ColorMessage "‚ùå Conteneur '$ContainerName' non trouv√© dans '$ResourceGroup'" -Color "Error"
        return
    }
    
    Write-ColorMessage "üìã Informations du conteneur:" -Color "Info"
    Write-ColorMessage "   ‚Ä¢ Nom: $($container.name)" -Color "Info"
    Write-ColorMessage "   ‚Ä¢ √âtat: $($container.instanceView.state)" -Color $(if ($container.instanceView.state -eq "Running") { "Success" } else { "Warning" })
    Write-ColorMessage "   ‚Ä¢ Groupe de ressources: $($container.resourceGroup)" -Color "Info"
    Write-ColorMessage "   ‚Ä¢ Localisation: $($container.location)" -Color "Info"
    
    if ($container.ipAddress) {
        Write-ColorMessage "   ‚Ä¢ IP publique: $($container.ipAddress.ip)" -Color "Info"
        if ($container.ipAddress.fqdn) {
            Write-ColorMessage "   ‚Ä¢ FQDN: $($container.ipAddress.fqdn)" -Color "Success"
            Write-ColorMessage "   ‚Ä¢ URL: https://$($container.ipAddress.fqdn):8000" -Color "Success"
        }
        Write-ColorMessage "   ‚Ä¢ Ports: $($container.ipAddress.ports | ForEach-Object { "$($_.port)/$($_.protocol)" } | Join-String -Separator ', ')" -Color "Info"
    }
    
    Write-ColorMessage "   ‚Ä¢ CPU: $($container.containers[0].resources.requests.cpu)" -Color "Info"
    Write-ColorMessage "   ‚Ä¢ M√©moire: $($container.containers[0].resources.requests.memoryInGB) GB" -Color "Info"
    Write-ColorMessage "   ‚Ä¢ Image: $($container.containers[0].image)" -Color "Info"
    
    if ($container.instanceView.currentState) {
        Write-ColorMessage "   ‚Ä¢ D√©marr√©: $($container.instanceView.currentState.startTime)" -Color "Info"
        if ($container.instanceView.currentState.exitCode) {
            Write-ColorMessage "   ‚Ä¢ Code de sortie: $($container.instanceView.currentState.exitCode)" -Color "Warning"
        }
    }
    
    # Test de connectivit√© si le conteneur est en cours d'ex√©cution
    if ($container.instanceView.state -eq "Running" -and $container.ipAddress.fqdn) {
        Write-ColorMessage ""
        Write-ColorMessage "üîß Test de connectivit√©..." -Color "Info"
        $url = "https://$($container.ipAddress.fqdn):8000/health"
        try {
            $response = Invoke-RestMethod -Uri $url -Method Get -TimeoutSec 5
            Write-ColorMessage "‚úÖ Serveur accessible et r√©pond" -Color "Success"
        }
        catch {
            Write-ColorMessage "‚ö†Ô∏è Serveur non accessible: $($_.Exception.Message)" -Color "Warning"
        }
    }
}

function Get-ContainerLogs {
    Write-Header "üìú LOGS DU CONTENEUR"
    
    $container = Test-ContainerExists
    if (-not $container) {
        Write-ColorMessage "‚ùå Conteneur '$ContainerName' non trouv√© dans '$ResourceGroup'" -Color "Error"
        return
    }
    
    Write-ColorMessage "üìã R√©cup√©ration des $LogLines derni√®res lignes de logs..." -Color "Info"
    
    if ($Follow) {
        Write-ColorMessage "üëÄ Mode suivi activ√© (Ctrl+C pour arr√™ter)" -Color "Info"
        az container logs --resource-group $ResourceGroup --name $ContainerName --follow
    }
    else {
        az container logs --resource-group $ResourceGroup --name $ContainerName --tail $LogLines
    }
}

function Restart-Container {
    Write-Header "üîÑ RED√âMARRAGE DU CONTENEUR"
    
    $container = Test-ContainerExists
    if (-not $container) {
        Write-ColorMessage "‚ùå Conteneur '$ContainerName' non trouv√© dans '$ResourceGroup'" -Color "Error"
        return
    }
    
    Write-ColorMessage "üîß Red√©marrage du conteneur '$ContainerName'..." -Color "Info"
    az container restart --resource-group $ResourceGroup --name $ContainerName --output none
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorMessage "‚úÖ Conteneur red√©marr√© avec succ√®s" -Color "Success"
        Write-ColorMessage "‚è≥ Attente du d√©marrage (15 secondes)..." -Color "Info"
        Start-Sleep -Seconds 15
        Get-ContainerStatus
    }
    else {
        Write-ColorMessage "‚ùå √âchec du red√©marrage du conteneur" -Color "Error"
    }
}

function Stop-Container {
    Write-Header "‚èπÔ∏è ARR√äT DU CONTENEUR"
    
    $container = Test-ContainerExists
    if (-not $container) {
        Write-ColorMessage "‚ùå Conteneur '$ContainerName' non trouv√© dans '$ResourceGroup'" -Color "Error"
        return
    }
    
    if ($container.instanceView.state -ne "Running") {
        Write-ColorMessage "‚ö†Ô∏è Le conteneur n'est pas en cours d'ex√©cution (√âtat: $($container.instanceView.state))" -Color "Warning"
        return
    }
    
    Write-ColorMessage "üîß Arr√™t du conteneur '$ContainerName'..." -Color "Info"
    az container stop --resource-group $ResourceGroup --name $ContainerName --output none
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorMessage "‚úÖ Conteneur arr√™t√© avec succ√®s" -Color "Success"
    }
    else {
        Write-ColorMessage "‚ùå √âchec de l'arr√™t du conteneur" -Color "Error"
    }
}

function Start-Container {
    Write-Header "‚ñ∂Ô∏è D√âMARRAGE DU CONTENEUR"
    
    $container = Test-ContainerExists
    if (-not $container) {
        Write-ColorMessage "‚ùå Conteneur '$ContainerName' non trouv√© dans '$ResourceGroup'" -Color "Error"
        return
    }
    
    if ($container.instanceView.state -eq "Running") {
        Write-ColorMessage "‚ö†Ô∏è Le conteneur est d√©j√† en cours d'ex√©cution" -Color "Warning"
        return
    }
    
    Write-ColorMessage "üîß D√©marrage du conteneur '$ContainerName'..." -Color "Info"
    az container start --resource-group $ResourceGroup --name $ContainerName --output none
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorMessage "‚úÖ Conteneur d√©marr√© avec succ√®s" -Color "Success"
        Write-ColorMessage "‚è≥ Attente du d√©marrage (15 secondes)..." -Color "Info"
        Start-Sleep -Seconds 15
        Get-ContainerStatus
    }
    else {
        Write-ColorMessage "‚ùå √âchec du d√©marrage du conteneur" -Color "Error"
    }
}

function Remove-Container {
    Write-Header "üóëÔ∏è SUPPRESSION DU CONTENEUR"
    
    $container = Test-ContainerExists
    if (-not $container) {
        Write-ColorMessage "‚ùå Conteneur '$ContainerName' non trouv√© dans '$ResourceGroup'" -Color "Error"
        return
    }
    
    Write-ColorMessage "‚ö†Ô∏è ATTENTION: Cette action va supprimer d√©finitivement le conteneur!" -Color "Warning"
    $confirmation = Read-Host "Tapez 'OUI' pour confirmer la suppression"
    
    if ($confirmation -ne "OUI") {
        Write-ColorMessage "‚ùå Suppression annul√©e" -Color "Info"
        return
    }
    
    Write-ColorMessage "üîß Suppression du conteneur '$ContainerName'..." -Color "Info"
    az container delete --resource-group $ResourceGroup --name $ContainerName --yes --output none
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorMessage "‚úÖ Conteneur supprim√© avec succ√®s" -Color "Success"
    }
    else {
        Write-ColorMessage "‚ùå √âchec de la suppression du conteneur" -Color "Error"
    }
}

function Get-ContainerUrl {
    $container = Test-ContainerExists
    if (-not $container) {
        Write-ColorMessage "‚ùå Conteneur '$ContainerName' non trouv√© dans '$ResourceGroup'" -Color "Error"
        return
    }
    
    if ($container.ipAddress.fqdn) {
        $url = "https://$($container.ipAddress.fqdn):8000"
        Write-ColorMessage "üåê URL du serveur: $url" -Color "Success"
        
        # Copier dans le presse-papiers si possible
        try {
            $url | Set-Clipboard
            Write-ColorMessage "üìã URL copi√©e dans le presse-papiers" -Color "Info"
        }
        catch {
            # Ignore si le presse-papiers n'est pas disponible
        }
    }
    else {
        Write-ColorMessage "‚ùå Aucune URL publique disponible pour ce conteneur" -Color "Error"
    }
}

# SCRIPT PRINCIPAL
try {
    Write-Header "üõ†Ô∏è GESTION MCP WEATHER SERVER AZURE"
    
    # V√©rifier la connexion Azure
    try {
        $account = az account show --output json 2>$null | ConvertFrom-Json
        Write-ColorMessage "‚úÖ Connect√© √† Azure (Subscription: $($account.name))" -Color "Success"
    }
    catch {
        Write-ColorMessage "‚ùå Non connect√© √† Azure. Ex√©cutez 'az login' d'abord." -Color "Error"
        exit 1
    }
    
    switch ($Action.ToLower()) {
        "status" { Get-ContainerStatus }
        "logs" { Get-ContainerLogs }
        "restart" { Restart-Container }
        "stop" { Stop-Container }
        "start" { Start-Container }
        "delete" { Remove-Container }
        "url" { Get-ContainerUrl }
        default {
            Write-ColorMessage "‚ùå Action non reconnue: $Action" -Color "Error"
            Write-ColorMessage "Actions disponibles: status, logs, restart, stop, start, delete, url" -Color "Info"
            exit 1
        }
    }
}
catch {
    Write-ColorMessage "‚ùå Erreur durant l'ex√©cution: $($_.Exception.Message)" -Color "Error"
    exit 1
} 