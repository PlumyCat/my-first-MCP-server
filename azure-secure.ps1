#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Script de s√©curisation Azure AD pour le container MCP Weather existant
.DESCRIPTION
    Ce script met √† jour un container Azure existant avec l'authentification Azure AD
    sans n√©cessiter un red√©ploiement complet
.PARAMETER ResourceGroupName
    Nom du groupe de ressources Azure
.PARAMETER ContainerInstanceName
    Nom de l'instance de conteneur √† s√©curiser
.PARAMETER ContainerRegistryName
    Nom du registre de conteneurs Azure
.PARAMETER TenantId
    Azure AD Tenant ID
.PARAMETER ClientId
    Azure AD Client ID (Application ID)
.PARAMETER ClientSecret
    Azure AD Client Secret
.EXAMPLE
    .\azure-secure.ps1 -ContainerRegistryName "mcpweather2024" -TenantId "your-tenant-id" -ClientId "your-client-id" -ClientSecret "your-secret"
#>

param(
    [Parameter(Mandatory=$false)]
    [string]$ResourceGroupName = "mcp-weather-rg",
    
    [Parameter(Mandatory=$false)]
    [string]$ContainerInstanceName = "mcp-weather-server",
    
    [Parameter(Mandatory=$true)]
    [string]$ContainerRegistryName,
    
    [Parameter(Mandatory=$true)]
    [string]$TenantId,
    
    [Parameter(Mandatory=$true)]
    [string]$ClientId,
    
    [Parameter(Mandatory=$true)]
    [string]$ClientSecret,
    
    [Parameter(Mandatory=$false)]
    [string]$ImageTag = "secure"
)

# Configuration des couleurs pour les messages
$ErrorActionPreference = "Stop"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Write-Step {
    param([string]$Message)
    Write-ColorOutput "üîÑ $Message" "Cyan"
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è  $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è  $Message" "Blue"
}

# En-t√™te
Write-ColorOutput "üîê S√©curisation Azure AD - MCP Weather Server" "Magenta"
Write-ColorOutput "=============================================" "Magenta"

# V√©rification de la connexion Azure
Write-Step "V√©rification de la connexion Azure..."
try {
    $account = az account show --output json | ConvertFrom-Json
    Write-Success "Connect√© √† Azure avec: $($account.user.name)"
} catch {
    Write-Error "Vous n'√™tes pas connect√© √† Azure. Ex√©cutez 'az login' pour vous connecter."
    exit 1
}

# Variables d√©riv√©es
$acrLoginServer = "$ContainerRegistryName.azurecr.io"
$imageName = "$acrLoginServer/mcp-weather-server"
$secureImageName = "$imageName`:$ImageTag"

Write-ColorOutput "`nüìã Configuration de s√©curisation:" "Yellow"
Write-ColorOutput "  ‚Ä¢ Groupe de ressources: $ResourceGroupName" "White"
Write-ColorOutput "  ‚Ä¢ Instance de conteneur: $ContainerInstanceName" "White"
Write-ColorOutput "  ‚Ä¢ Registre: $ContainerRegistryName" "White"
Write-ColorOutput "  ‚Ä¢ Image s√©curis√©e: $secureImageName" "White"
Write-ColorOutput "  ‚Ä¢ Azure AD Tenant: $TenantId" "White"
Write-ColorOutput "  ‚Ä¢ Azure AD Client: $ClientId" "White"

# V√©rifier que le container existe
Write-Step "V√©rification de l'existence du container..."
try {
    $containerInfo = az container show --resource-group $ResourceGroupName --name $ContainerInstanceName --output json | ConvertFrom-Json
    Write-Success "Container '$ContainerInstanceName' trouv√©"
    Write-Info "√âtat actuel: $($containerInfo.instanceView.currentState.state)"
} catch {
    Write-Error "Container '$ContainerInstanceName' non trouv√© dans le groupe '$ResourceGroupName'"
    Write-Info "Assurez-vous que le container est d√©ploy√© avant de le s√©curiser"
    exit 1
}

# √âtape 1: Ajouter les variables Azure AD au fichier .env existant
Write-Step "Ajout des variables Azure AD au fichier .env..."
try {
    # V√©rifier si le fichier .env existe
    if (Test-Path ".env") {
        Write-Info "Fichier .env existant d√©tect√© - ajout des variables Azure AD"
        
        # Lire le contenu existant
        $existingContent = Get-Content ".env" -Raw
        
        # Supprimer les anciennes variables Azure AD si elles existent
        $existingContent = $existingContent -replace "(?m)^AZURE_AD_.*$", ""
        $existingContent = $existingContent -replace "(?m)^MCP_SECURE_MODE=.*$", ""
        
        # Nettoyer les lignes vides multiples
        $existingContent = $existingContent -replace "(?m)^\s*$\n", ""
        
        # Ajouter les nouvelles variables Azure AD
        $newContent = $existingContent.TrimEnd() + "`n`n# Configuration Azure AD pour l'authentification`n"
        $newContent += "AZURE_AD_TENANT_ID=$TenantId`n"
        $newContent += "AZURE_AD_CLIENT_ID=$ClientId`n"
        $newContent += "AZURE_AD_CLIENT_SECRET=$ClientSecret`n"
        $newContent += "MCP_SECURE_MODE=true`n"
        
        # Sauvegarder le fichier mis √† jour
        $newContent | Out-File -FilePath ".env" -Encoding UTF8 -NoNewline
        Write-Success "Variables Azure AD ajout√©es au fichier .env existant"
        
    } else {
        Write-Warning "Fichier .env non trouv√© - cr√©ation d'un nouveau fichier"
        
        # Cr√©er un nouveau fichier .env minimal
        $envContent = @"
# Configuration Azure AD pour l'authentification
AZURE_AD_TENANT_ID=$TenantId
AZURE_AD_CLIENT_ID=$ClientId
AZURE_AD_CLIENT_SECRET=$ClientSecret

# Mode s√©curis√© activ√©
MCP_SECURE_MODE=true
"@
        $envContent | Out-File -FilePath ".env" -Encoding UTF8
        Write-Success "Nouveau fichier .env cr√©√© avec les variables Azure AD"
    }
} catch {
    Write-Error "Erreur lors de la mise √† jour du fichier .env: $_"
    exit 1
}

# √âtape 2: Construire une nouvelle image avec les variables d'environnement
Write-Step "Construction de l'image Docker s√©curis√©e..."
try {
    # Cr√©er un Dockerfile temporaire qui inclut les variables d'environnement (non sensibles seulement)
    $secureDockerfile = @"
# Image s√©curis√©e bas√©e sur l'image existante
FROM $imageName`:latest

# Ajout des variables d'environnement non sensibles
ENV AZURE_AD_TENANT_ID=$TenantId
ENV AZURE_AD_CLIENT_ID=$ClientId
ENV MCP_SECURE_MODE=true

# Note: AZURE_AD_CLIENT_SECRET sera pass√© au runtime pour la s√©curit√©

# R√©exposer le port
EXPOSE 8000

# Commande par d√©faut (inchang√©e)
CMD ["python", "-m", "src.main"]
"@

    $secureDockerfile | Out-File -FilePath "Dockerfile.secure" -Encoding UTF8
    
    # Construire la nouvelle image
    docker build -f Dockerfile.secure -t $secureImageName .
    Write-Success "Image Docker s√©curis√©e construite"
    
    # Nettoyer le Dockerfile temporaire
    Remove-Item "Dockerfile.secure" -Force
    
} catch {
    Write-Error "Erreur lors de la construction de l'image s√©curis√©e: $_"
    exit 1
}

# √âtape 3: Se connecter au registre et pousser l'image
Write-Step "Connexion au registre de conteneurs..."
try {
    az acr login --name $ContainerRegistryName
    Write-Success "Connexion au registre r√©ussie"
} catch {
    Write-Error "Erreur lors de la connexion au registre: $_"
    exit 1
}

Write-Step "Push de l'image s√©curis√©e vers Azure Container Registry..."
try {
    docker push $secureImageName
    Write-Success "Image s√©curis√©e pouss√©e vers ACR"
} catch {
    Write-Error "Erreur lors du push: $_"
    exit 1
}

# √âtape 4: Obtenir les identifiants du registre
Write-Step "R√©cup√©ration des identifiants du registre..."
try {
    $acrCredentials = az acr credential show --name $ContainerRegistryName --output json | ConvertFrom-Json
    $acrUsername = $acrCredentials.username
    $acrPassword = $acrCredentials.passwords[0].value
    Write-Success "Identifiants du registre r√©cup√©r√©s"
} catch {
    Write-Error "Erreur lors de la r√©cup√©ration des identifiants: $_"
    exit 1
}

# √âtape 5: Supprimer l'ancien container
Write-Step "Suppression de l'ancien container non s√©curis√©..."
try {
    az container delete --resource-group $ResourceGroupName --name $ContainerInstanceName --yes --output none
    Write-Success "Ancien container supprim√©"
    
    # Attendre un peu pour que la suppression soit effective
    Start-Sleep -Seconds 10
} catch {
    Write-Error "Erreur lors de la suppression de l'ancien container: $_"
    exit 1
}

# √âtape 6: D√©ployer le nouveau container s√©curis√©
Write-Step "D√©ploiement du container s√©curis√© avec Azure AD..."
try {
    $deployResult = az container create `
        --resource-group $ResourceGroupName `
        --name $ContainerInstanceName `
        --image $secureImageName `
        --registry-login-server $acrLoginServer `
        --registry-username $acrUsername `
        --registry-password $acrPassword `
        --cpu 1 `
        --memory 1 `
        --os-type Linux `
        --restart-policy Always `
        --environment-variables PYTHONUNBUFFERED=1 PYTHONPATH=/app MCP_SECURE_MODE=true AZURE_AD_TENANT_ID=$TenantId AZURE_AD_CLIENT_ID=$ClientId AZURE_AD_CLIENT_SECRET=$ClientSecret `
        --ports 8000 `
        --protocol TCP `
        --dns-name-label $ContainerInstanceName `
        --output json 2>&1
    
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Erreur lors du d√©ploiement s√©curis√©: $deployResult"
        exit 1
    }
    
    Write-Success "Container s√©curis√© d√©ploy√© avec succ√®s"
} catch {
    Write-Error "Erreur lors du d√©ploiement s√©curis√©: $_"
    exit 1
}

# √âtape 7: V√©rifier le d√©ploiement s√©curis√©
Write-Step "V√©rification du d√©ploiement s√©curis√©..."
try {
    Start-Sleep -Seconds 15
    
    $containerInfo = az container show --resource-group $ResourceGroupName --name $ContainerInstanceName --output json | ConvertFrom-Json
    
    if (-not $containerInfo) {
        Write-Error "Impossible de r√©cup√©rer les informations du container s√©curis√©"
        exit 1
    }
    
    $publicIP = $containerInfo.ipAddress.ip
    $fqdn = $containerInfo.ipAddress.fqdn
    $state = $containerInfo.instanceView.currentState.state
    
    Write-Success "Container s√©curis√© d√©ploy√© et op√©rationnel!"
    
    Write-ColorOutput "`nüîê Informations du d√©ploiement s√©curis√©:" "Green"
    Write-ColorOutput "========================================" "Green"
    Write-ColorOutput "  ‚Ä¢ Nom de l'instance: $ContainerInstanceName" "White"
    Write-ColorOutput "  ‚Ä¢ √âtat: $state" "White"
    Write-ColorOutput "  ‚Ä¢ Adresse IP publique: $publicIP" "White"
    if ($fqdn) {
        Write-ColorOutput "  ‚Ä¢ FQDN: $fqdn" "White"
        Write-ColorOutput "  ‚Ä¢ URL s√©curis√©e: https://$fqdn`:8000" "White"
    }
    Write-ColorOutput "  ‚Ä¢ Mode s√©curis√©: ‚úÖ ACTIV√â" "Green"
    Write-ColorOutput "  ‚Ä¢ Azure AD Tenant: $TenantId" "White"
    Write-ColorOutput "  ‚Ä¢ Azure AD Application: $ClientId" "White"
    
} catch {
    Write-Error "Erreur lors de la v√©rification: $_"
    exit 1
}

# √âtape 8: Test de l'authentification
Write-Step "Test de l'authentification Azure AD..."
try {
    Write-Info "Test de l'endpoint non authentifi√©..."
    $testUrl = "http://$fqdn`:8000"
    
    # Test sans authentification (devrait √©chouer)
    try {
        $response = Invoke-WebRequest -Uri $testUrl -Method GET -TimeoutSec 10
        Write-Warning "‚ö†Ô∏è  L'endpoint r√©pond sans authentification - v√©rifiez la configuration"
    } catch {
        Write-Success "‚úÖ L'endpoint requiert bien une authentification"
    }
    
} catch {
    Write-Warning "Impossible de tester l'authentification automatiquement"
}

# √âtape 9: Instructions pour l'utilisation
Write-ColorOutput "`nüìö Instructions d'utilisation:" "Blue"
Write-ColorOutput "==============================" "Blue"
Write-ColorOutput "1. Obtenir un token Azure AD:" "White"
Write-ColorOutput "   ‚Ä¢ Connectez-vous √† votre application Azure AD 'mcp-weather-secure'" "Gray"
Write-ColorOutput "   ‚Ä¢ Obtenez un token d'acc√®s valide" "Gray"
Write-ColorOutput ""
Write-ColorOutput "2. Utiliser l'API s√©curis√©e:" "White"
Write-ColorOutput "   curl -H 'Authorization: Bearer YOUR_TOKEN' http://$fqdn`:8000/api/weather" "Gray"
Write-ColorOutput ""
Write-ColorOutput "3. Int√©gration avec Claude Desktop:" "White"
Write-ColorOutput "   ‚Ä¢ Mettez √† jour votre configuration MCP" "Gray"
Write-ColorOutput "   ‚Ä¢ Ajoutez les variables d'environnement Azure AD" "Gray"

Write-ColorOutput "`nüõ†Ô∏è  Commandes de gestion:" "Yellow"
Write-ColorOutput "=========================" "Yellow"
Write-ColorOutput "Voir les logs du container s√©curis√©:" "White"
Write-ColorOutput "  az container logs --resource-group $ResourceGroupName --name $ContainerInstanceName --follow" "Gray"
Write-ColorOutput ""
Write-ColorOutput "Red√©marrer le container:" "White"
Write-ColorOutput "  az container restart --resource-group $ResourceGroupName --name $ContainerInstanceName" "Gray"
Write-ColorOutput ""
Write-ColorOutput "V√©rifier les variables d'environnement:" "White"
Write-ColorOutput "  az container show --resource-group $ResourceGroupName --name $ContainerInstanceName --query 'containers[0].environmentVariables'" "Gray"

Write-ColorOutput "`nüîí S√©curit√© activ√©e:" "Green"
Write-ColorOutput "===================" "Green"
Write-ColorOutput "‚úÖ Authentification Azure AD activ√©e" "Green"
Write-ColorOutput "‚úÖ Variables d'environnement s√©curis√©es" "Green"
Write-ColorOutput "‚úÖ Logs conformes RGPD" "Green"
Write-ColorOutput "‚úÖ Validation des tokens JWT" "Green"
Write-ColorOutput "‚úÖ Gestion des r√¥les utilisateur" "Green"

Write-ColorOutput "`nüéâ S√©curisation termin√©e avec succ√®s!" "Green"
Write-ColorOutput "Votre serveur MCP Weather est maintenant s√©curis√© avec Azure AD!" "Green" 