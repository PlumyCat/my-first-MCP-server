#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Script pour obtenir un token Azure AD et tester le serveur MCP s√©curis√©
.DESCRIPTION
    Ce script obtient un token d'acc√®s Azure AD et teste l'authentification du serveur MCP Weather
.PARAMETER TenantId
    Azure AD Tenant ID
.PARAMETER ClientId
    Azure AD Client ID (Application ID)
.PARAMETER ClientSecret
    Azure AD Client Secret
.PARAMETER ServerUrl
    URL du serveur MCP Weather s√©curis√©
.PARAMETER TestEndpoint
    Teste l'endpoint avec le token obtenu
.EXAMPLE
    .\azure-get-token.ps1 -TenantId "your-tenant-id" -ClientId "your-client-id" -ClientSecret "your-secret"
    .\azure-get-token.ps1 -TenantId "your-tenant-id" -ClientId "your-client-id" -ClientSecret "your-secret" -ServerUrl "http://your-server.com:8000" -TestEndpoint
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$TenantId,
    
    [Parameter(Mandatory=$true)]
    [string]$ClientId,
    
    [Parameter(Mandatory=$true)]
    [string]$ClientSecret,
    
    [Parameter(Mandatory=$false)]
    [string]$ServerUrl,
    
    [Parameter(Mandatory=$false)]
    [switch]$TestEndpoint
)

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Write-Step {
    param([string]$Message)
    Write-ColorOutput "üîÑ $Message" "Cyan"
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è  $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è  $Message" "Blue"
}

# En-t√™te
Write-ColorOutput "üîë G√©n√©rateur de token Azure AD - MCP Weather" "Magenta"
Write-ColorOutput "=============================================" "Magenta"

# Configuration Azure AD
$tokenUrl = "https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token"
$scope = "api://$ClientId/.default"  # Scope pour l'application personnalis√©e

Write-ColorOutput "`nüìã Configuration:" "Yellow"
Write-ColorOutput "  ‚Ä¢ Tenant ID: $TenantId" "White"
Write-ColorOutput "  ‚Ä¢ Client ID: $ClientId" "White"
Write-ColorOutput "  ‚Ä¢ Token URL: $tokenUrl" "White"
if ($ServerUrl) {
    Write-ColorOutput "  ‚Ä¢ Server URL: $ServerUrl" "White"
}

# √âtape 1: Obtenir le token Azure AD
Write-Step "Obtention du token Azure AD..."

try {
    # Pr√©parer les donn√©es pour la requ√™te
    $body = @{
        client_id     = $ClientId
        client_secret = $ClientSecret
        scope         = $scope
        grant_type    = "client_credentials"
    }
    
    Write-Info "Tentative avec scope: $scope"
    
    # Faire la requ√™te pour obtenir le token
    try {
        $response = Invoke-RestMethod -Uri $tokenUrl -Method POST -Body $body -ContentType "application/x-www-form-urlencoded"
    } catch {
        Write-Warning "√âchec avec le scope personnalis√©, tentative avec scope g√©n√©rique..."
        
        # Essayer avec un scope plus g√©n√©rique
        $body.scope = "https://graph.microsoft.com/.default"
        Write-Info "Tentative avec scope: $($body.scope)"
        $response = Invoke-RestMethod -Uri $tokenUrl -Method POST -Body $body -ContentType "application/x-www-form-urlencoded"
    }
    
    if ($response.access_token) {
        Write-Success "Token Azure AD obtenu avec succ√®s"
        
        # D√©coder le token pour afficher les informations
        $tokenParts = $response.access_token.Split('.')
        
        # Fonction pour corriger le padding Base64
        function Fix-Base64Padding {
            param([string]$base64String)
            $padding = 4 - ($base64String.Length % 4)
            if ($padding -ne 4) {
                $base64String += "=" * $padding
            }
            return $base64String
        }
        
        $headerB64 = Fix-Base64Padding $tokenParts[0]
        $payloadB64 = Fix-Base64Padding $tokenParts[1]
        
        $header = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($headerB64))
        $payload = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payloadB64))
        
        $headerObj = $header | ConvertFrom-Json
        $payloadObj = $payload | ConvertFrom-Json
        
        Write-ColorOutput "`nüé´ Informations du token:" "Green"
        Write-ColorOutput "=========================" "Green"
        Write-ColorOutput "  ‚Ä¢ Type: $($response.token_type)" "White"
        Write-ColorOutput "  ‚Ä¢ Expire dans: $($response.expires_in) secondes" "White"
        Write-ColorOutput "  ‚Ä¢ Algorithme: $($headerObj.alg)" "White"
        Write-ColorOutput "  ‚Ä¢ Audience: $($payloadObj.aud)" "White"
        Write-ColorOutput "  ‚Ä¢ Issuer: $($payloadObj.iss)" "White"
        Write-ColorOutput "  ‚Ä¢ App ID: $($payloadObj.appid)" "White"
        
        # Calculer l'expiration
        $expirationTime = [DateTimeOffset]::FromUnixTimeSeconds($payloadObj.exp).ToLocalTime()
        Write-ColorOutput "  ‚Ä¢ Expire le: $expirationTime" "White"
        
        # Afficher le token (tronqu√© pour la s√©curit√©)
        $truncatedToken = $response.access_token.Substring(0, 50) + "..." + $response.access_token.Substring($response.access_token.Length - 10)
        Write-ColorOutput "`nüîê Token (tronqu√©):" "Blue"
        Write-ColorOutput $truncatedToken "Gray"
        
        # Sauvegarder le token complet dans un fichier temporaire
        $tokenFile = "azure_token.txt"
        $response.access_token | Out-File -FilePath $tokenFile -Encoding UTF8
        Write-Info "Token complet sauvegard√© dans: $tokenFile"
        
        # Copier le token dans le presse-papiers si possible
        try {
            $response.access_token | Set-Clipboard
            Write-Success "Token copi√© dans le presse-papiers"
        } catch {
            Write-Warning "Impossible de copier dans le presse-papiers"
        }
        
    } else {
        Write-Error "Impossible d'obtenir le token Azure AD"
        Write-Error "R√©ponse: $($response | ConvertTo-Json)"
        exit 1
    }
    
} catch {
    Write-Error "Erreur lors de l'obtention du token: $_"
    Write-Error "V√©rifiez vos identifiants Azure AD"
    exit 1
}

# √âtape 2: Tester l'endpoint si demand√©
if ($TestEndpoint -and $ServerUrl) {
    Write-Step "Test de l'authentification sur le serveur..."
    
    try {
        # Test sans authentification
        Write-Info "Test sans authentification (devrait √©chouer)..."
        try {
            $responseNoAuth = Invoke-WebRequest -Uri $ServerUrl -Method GET -TimeoutSec 10
            Write-Warning "‚ö†Ô∏è  Le serveur r√©pond sans authentification"
            Write-ColorOutput "Status: $($responseNoAuth.StatusCode)" "Yellow"
        } catch {
            Write-Success "‚úÖ Le serveur requiert bien une authentification"
            Write-ColorOutput "Erreur attendue: $($_.Exception.Message)" "Gray"
        }
        
        # Test avec authentification
        Write-Info "Test avec authentification..."
        $headers = @{
            "Authorization" = "Bearer $($response.access_token)"
            "Content-Type" = "application/json"
        }
        
        try {
            $responseAuth = Invoke-WebRequest -Uri $ServerUrl -Method GET -Headers $headers -TimeoutSec 10
            Write-Success "‚úÖ Authentification r√©ussie!"
            Write-ColorOutput "Status: $($responseAuth.StatusCode)" "Green"
            Write-ColorOutput "Response: $($responseAuth.Content.Substring(0, [Math]::Min(200, $responseAuth.Content.Length)))..." "Gray"
        } catch {
            Write-Warning "‚ö†Ô∏è  Erreur avec authentification: $($_.Exception.Message)"
            
            # Analyser l'erreur
            if ($_.Exception.Response) {
                $statusCode = $_.Exception.Response.StatusCode
                Write-ColorOutput "Status Code: $statusCode" "Yellow"
                
                if ($statusCode -eq 401) {
                    Write-Info "Le token pourrait ne pas √™tre valide pour cette application"
                } elseif ($statusCode -eq 403) {
                    Write-Info "Le token est valide mais l'acc√®s est refus√© (v√©rifiez les r√¥les)"
                }
            }
        }
        
    } catch {
        Write-Error "Erreur lors du test: $_"
    }
}

# √âtape 3: Instructions d'utilisation
Write-ColorOutput "`nüìö Instructions d'utilisation:" "Blue"
Write-ColorOutput "==============================" "Blue"
Write-ColorOutput "1. Utiliser avec curl:" "White"
Write-ColorOutput "   curl -H 'Authorization: Bearer YOUR_TOKEN' $ServerUrl" "Gray"
Write-ColorOutput ""
Write-ColorOutput "2. Utiliser avec PowerShell:" "White"
Write-ColorOutput "   `$headers = @{'Authorization' = 'Bearer YOUR_TOKEN'}" "Gray"
Write-ColorOutput "   Invoke-RestMethod -Uri '$ServerUrl' -Headers `$headers" "Gray"
Write-ColorOutput ""
Write-ColorOutput "3. Utiliser le token depuis le fichier:" "White"
Write-ColorOutput "   `$token = Get-Content 'azure_token.txt'" "Gray"
Write-ColorOutput ""
Write-ColorOutput "4. Tester l'API MCP Weather:" "White"
Write-ColorOutput "   curl -H 'Authorization: Bearer YOUR_TOKEN' -H 'Content-Type: application/json' \\" "Gray"
Write-ColorOutput "        -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/call\",\"params\":{\"name\":\"get_weather\",\"arguments\":{\"city\":\"Paris\"}}}' \\" "Gray"
Write-ColorOutput "        $ServerUrl" "Gray"

Write-ColorOutput "`nüîß D√©pannage:" "Yellow"
Write-ColorOutput "=============" "Yellow"
Write-ColorOutput "‚Ä¢ Si le token ne fonctionne pas:" "White"
Write-ColorOutput "  - V√©rifiez que l'application Azure AD a les bonnes permissions" "Gray"
Write-ColorOutput "  - V√©rifiez que le serveur utilise le m√™me Tenant ID" "Gray"
Write-ColorOutput "  - V√©rifiez que le token n'est pas expir√©" "Gray"
Write-ColorOutput ""
Write-ColorOutput "‚Ä¢ Pour renouveler le token:" "White"
Write-ColorOutput "  - Relancez ce script" "Gray"
Write-ColorOutput "  - Le token est valide pendant $($response.expires_in) secondes" "Gray"

Write-ColorOutput "`nüí° Conseils de s√©curit√©:" "Yellow"
Write-ColorOutput "========================" "Yellow"
Write-ColorOutput "‚Ä¢ Ne partagez jamais votre token d'acc√®s" "Red"
Write-ColorOutput "‚Ä¢ Supprimez le fichier azure_token.txt apr√®s utilisation" "Red"
Write-ColorOutput "‚Ä¢ Utilisez HTTPS en production" "Red"
Write-ColorOutput "‚Ä¢ Configurez des r√¥les appropri√©s dans Azure AD" "Red"

Write-ColorOutput "`nüéâ Token g√©n√©r√© avec succ√®s!" "Green"
if ($TestEndpoint -and $ServerUrl) {
    Write-ColorOutput "Test d'authentification termin√©!" "Green"
} else {
    Write-ColorOutput "Utilisez -TestEndpoint -ServerUrl pour tester automatiquement" "Blue"
} 