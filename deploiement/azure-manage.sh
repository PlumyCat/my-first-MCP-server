#!/bin/bash

# Script de gestion pour le serveur MCP Weather d√©ploy√© sur Azure
# Version Linux du script azure-manage.ps1

set -e

# Variables par d√©faut
ACTION=""
RESOURCE_GROUP_NAME="mcp-weather-rg"
CONTAINER_INSTANCE_NAME="mcp-weather-server"
FOLLOW=false

# Fonction d'aide
show_help() {
    echo "üõ†Ô∏è  Gestionnaire Azure MCP Weather Server"
    echo "========================================="
    echo ""
    echo "Usage: $0 --action ACTION [OPTIONS]"
    echo ""
    echo "Actions disponibles:"
    echo "  status   - Affiche l'√©tat du conteneur"
    echo "  logs     - Affiche les logs du conteneur"
    echo "  restart  - Red√©marre le conteneur"
    echo "  stop     - Arr√™te le conteneur"
    echo "  start    - D√©marre le conteneur"
    echo "  update   - Met √† jour le conteneur avec une nouvelle image"
    echo "  delete   - Supprime compl√®tement le d√©ploiement"
    echo "  help     - Affiche cette aide"
    echo ""
    echo "Options:"
    echo "  --action ACTION                 Action √† effectuer (obligatoire)"
    echo "  --resource-group-name NAME      Nom du groupe de ressources Azure (d√©faut: mcp-weather-rg)"
    echo "  --container-instance-name NAME  Nom de l'instance de conteneur (d√©faut: mcp-weather-server)"
    echo "  --follow                        Suit les logs en temps r√©el (pour l'action logs)"
    echo "  -h, --help                      Affiche cette aide"
    echo ""
    echo "Exemples d'utilisation:"
    echo "  $0 --action status"
    echo "  $0 --action logs --follow"
    echo "  $0 --action restart"
    echo "  $0 --action delete --resource-group-name 'mon-rg'"
}

# Traitement des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --action)
            ACTION="$2"
            shift 2
            ;;
        --resource-group-name)
            RESOURCE_GROUP_NAME="$2"
            shift 2
            ;;
        --container-instance-name)
            CONTAINER_INSTANCE_NAME="$2"
            shift 2
            ;;
        --follow)
            FOLLOW=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# V√©rifier que l'action est fournie
if [[ -z "$ACTION" ]]; then
    echo "Erreur: L'action est obligatoire"
    show_help
    exit 1
fi

# Valider l'action
case "$ACTION" in
    "status"|"logs"|"restart"|"stop"|"start"|"delete"|"update"|"help")
        ;;
    *)
        echo "Erreur: Action '$ACTION' non reconnue"
        show_help
        exit 1
        ;;
esac

# Fonctions de couleur
write_color() {
    local message="$1"
    local color="$2"
    case $color in
        "red") echo -e "\033[31m$message\033[0m" ;;
        "green") echo -e "\033[32m$message\033[0m" ;;
        "yellow") echo -e "\033[33m$message\033[0m" ;;
        "blue") echo -e "\033[34m$message\033[0m" ;;
        "magenta") echo -e "\033[35m$message\033[0m" ;;
        "cyan") echo -e "\033[36m$message\033[0m" ;;
        "gray") echo -e "\033[37m$message\033[0m" ;;
        "white") echo -e "\033[97m$message\033[0m" ;;
        *) echo "$message" ;;
    esac
}

write_step() {
    write_color "üîÑ $1" "cyan"
}

write_success() {
    write_color "‚úÖ $1" "green"
}

write_error() {
    write_color "‚ùå $1" "red"
}

write_warning() {
    write_color "‚ö†Ô∏è  $1" "yellow"
}

write_info() {
    write_color "‚ÑπÔ∏è  $1" "blue"
}

# Fonction pour tester la connexion Azure
test_azure_connection() {
    if az account show --output json &>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Fonction pour tester si le conteneur existe
test_container_exists() {
    if az container show --resource-group "$RESOURCE_GROUP_NAME" --name "$CONTAINER_INSTANCE_NAME" --output none 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Fonction pour afficher l'√©tat du conteneur
get_container_status() {
    write_step "R√©cup√©ration de l'√©tat du conteneur..."
    
    if container_info=$(az container show --resource-group "$RESOURCE_GROUP_NAME" --name "$CONTAINER_INSTANCE_NAME" --output json); then
        write_success "Informations du conteneur r√©cup√©r√©es"
        echo ""
        write_color "üìä √âtat du conteneur:" "green"
        write_color "=====================" "green"
        
        # Extraire les informations
        name=$(echo "$container_info" | jq -r '.name')
        state=$(echo "$container_info" | jq -r '.instanceView.currentState.state')
        start_time=$(echo "$container_info" | jq -r '.instanceView.currentState.startTime // "N/A"')
        cpu=$(echo "$container_info" | jq -r '.containers[0].resources.requests.cpu // "N/A"')
        memory=$(echo "$container_info" | jq -r '.containers[0].resources.requests.memoryInGB // "N/A"')
        ip=$(echo "$container_info" | jq -r '.ipAddress.ip // "N/A"')
        fqdn=$(echo "$container_info" | jq -r '.ipAddress.fqdn // "N/A"')
        restart_policy=$(echo "$container_info" | jq -r '.restartPolicy // "N/A"')
        resource_group=$(echo "$container_info" | jq -r '.resourceGroup // "N/A"')
        location=$(echo "$container_info" | jq -r '.location // "N/A"')
        
        write_color "  ‚Ä¢ Nom: $name" "white"
        write_color "  ‚Ä¢ √âtat: $state" "white"
        write_color "  ‚Ä¢ Heure de d√©marrage: $start_time" "white"
        write_color "  ‚Ä¢ CPU: $cpu c≈ìurs" "white"
        write_color "  ‚Ä¢ M√©moire: $memory GB" "white"
        write_color "  ‚Ä¢ Adresse IP: $ip" "white"
        
        if [[ "$fqdn" != "N/A" && "$fqdn" != "null" ]]; then
            write_color "  ‚Ä¢ FQDN: $fqdn" "white"
            write_color "  ‚Ä¢ URL: http://$fqdn:8000" "white"
        fi
        
        write_color "  ‚Ä¢ Politique de red√©marrage: $restart_policy" "white"
        write_color "  ‚Ä¢ Groupe de ressources: $resource_group" "white"
        write_color "  ‚Ä¢ R√©gion: $location" "white"
        
        # Afficher les √©v√©nements r√©cents
        events=$(echo "$container_info" | jq -r '.instanceView.events[]? | "\(.firstTimestamp): \(.message)"' 2>/dev/null)
        if [[ -n "$events" ]]; then
            echo ""
            write_color "üìã √âv√©nements r√©cents:" "yellow"
            echo "$events" | while IFS= read -r event; do
                write_color "  ‚Ä¢ $event" "gray"
            done
        fi
        
        return 0
    else
        write_error "Erreur lors de la r√©cup√©ration de l'√©tat"
        return 1
    fi
}

# Fonction pour r√©cup√©rer les logs
get_container_logs() {
    write_step "R√©cup√©ration des logs du conteneur..."
    
    if [[ "$FOLLOW" == "true" ]]; then
        write_info "Suivi des logs en temps r√©el (Ctrl+C pour arr√™ter)..."
        az container logs --resource-group "$RESOURCE_GROUP_NAME" --name "$CONTAINER_INSTANCE_NAME" --follow
    else
        if logs=$(az container logs --resource-group "$RESOURCE_GROUP_NAME" --name "$CONTAINER_INSTANCE_NAME"); then
            write_success "Logs r√©cup√©r√©s"
            echo ""
            write_color "üìú Logs du conteneur:" "green"
            write_color "====================" "green"
            echo "$logs"
        else
            write_error "Erreur lors de la r√©cup√©ration des logs"
            return 1
        fi
    fi
    return 0
}

# Fonction pour red√©marrer le conteneur
restart_container() {
    write_step "Red√©marrage du conteneur..."
    
    if az container restart --resource-group "$RESOURCE_GROUP_NAME" --name "$CONTAINER_INSTANCE_NAME" --output none; then
        write_success "Conteneur red√©marr√© avec succ√®s"
        
        # Attendre un peu et afficher le nouvel √©tat
        sleep 5
        get_container_status
        return 0
    else
        write_error "Erreur lors du red√©marrage"
        return 1
    fi
}

# Fonction pour arr√™ter le conteneur
stop_container() {
    write_step "Arr√™t du conteneur..."
    
    if az container stop --resource-group "$RESOURCE_GROUP_NAME" --name "$CONTAINER_INSTANCE_NAME" --output none; then
        write_success "Conteneur arr√™t√© avec succ√®s"
        return 0
    else
        write_error "Erreur lors de l'arr√™t"
        return 1
    fi
}

# Fonction pour d√©marrer le conteneur
start_container() {
    write_step "D√©marrage du conteneur..."
    
    if az container start --resource-group "$RESOURCE_GROUP_NAME" --name "$CONTAINER_INSTANCE_NAME" --output none; then
        write_success "Conteneur d√©marr√© avec succ√®s"
        
        # Attendre un peu et afficher l'√©tat
        sleep 5
        get_container_status
        return 0
    else
        write_error "Erreur lors du d√©marrage"
        return 1
    fi
}

# Fonction pour mettre √† jour le conteneur
update_container() {
    write_warning "La mise √† jour n√©cessite de reconstruire et red√©ployer l'image."
    write_info "Cette op√©ration va:"
    write_color "  1. Reconstruire l'image Docker localement" "gray"
    write_color "  2. La pousser vers Azure Container Registry" "gray"
    write_color "  3. Red√©marrer le conteneur avec la nouvelle image" "gray"
    
    read -p "Voulez-vous continuer? (o/N): " confirmation
    if [[ "$confirmation" != "o" && "$confirmation" != "O" && "$confirmation" != "oui" ]]; then
        write_warning "Mise √† jour annul√©e"
        return 1
    fi
    
    write_info "Pour effectuer la mise √† jour, veuillez ex√©cuter le script de d√©ploiement:"
    write_color "./deploy-azure.sh --container-registry-name 'votre-registre' --resource-group-name '$RESOURCE_GROUP_NAME' --container-instance-name '$CONTAINER_INSTANCE_NAME'" "yellow"
    
    return 0
}

# Fonction pour supprimer le d√©ploiement
remove_deployment() {
    write_warning "‚ö†Ô∏è  ATTENTION: Cette action va supprimer COMPL√àTEMENT le d√©ploiement!"
    write_color "Cela inclut:" "red"
    write_color "  ‚Ä¢ L'instance de conteneur" "red"
    write_color "  ‚Ä¢ Le groupe de ressources (si vide)" "red"
    write_color "  ‚Ä¢ Toutes les donn√©es associ√©es" "red"
    
    read -p "√ätes-vous s√ªr de vouloir supprimer le d√©ploiement? Tapez 'SUPPRIMER' pour confirmer: " confirmation
    if [[ "$confirmation" != "SUPPRIMER" ]]; then
        write_warning "Suppression annul√©e par l'utilisateur."
        return 1
    fi
    
    write_step "Suppression de l'instance de conteneur..."
    if az container delete --resource-group "$RESOURCE_GROUP_NAME" --name "$CONTAINER_INSTANCE_NAME" --yes --output none; then
        write_success "Instance de conteneur supprim√©e"
        
        # V√©rifier si le groupe de ressources est vide
        write_step "V√©rification du groupe de ressources..."
        if resources=$(az resource list --resource-group "$RESOURCE_GROUP_NAME" --output json); then
            resource_count=$(echo "$resources" | jq length)
            if [[ "$resource_count" -eq 0 ]]; then
                write_info "Le groupe de ressources est vide."
                read -p "Voulez-vous √©galement supprimer le groupe de ressources '$RESOURCE_GROUP_NAME'? (o/N): " rg_confirmation
                if [[ "$rg_confirmation" == "o" || "$rg_confirmation" == "O" || "$rg_confirmation" == "oui" ]]; then
                    if az group delete --name "$RESOURCE_GROUP_NAME" --yes --no-wait; then
                        write_success "Suppression du groupe de ressources initi√©e"
                    else
                        write_warning "Erreur lors de la suppression du groupe de ressources"
                    fi
                fi
            else
                write_info "Le groupe de ressources contient encore $resource_count ressource(s)"
            fi
        fi
        
        return 0
    else
        write_error "Erreur lors de la suppression"
        return 1
    fi
}

# Afficher l'aide si demand√©
if [[ "$ACTION" == "help" ]]; then
    show_help
    exit 0
fi

# V√©rifier la connexion Azure
if ! test_azure_connection; then
    write_error "Vous n'√™tes pas connect√© √† Azure. Ex√©cutez 'az login' pour vous connecter."
    exit 1
fi

# V√©rifier si le conteneur existe
if ! test_container_exists; then
    write_error "Le conteneur '$CONTAINER_INSTANCE_NAME' n'existe pas dans le groupe de ressources '$RESOURCE_GROUP_NAME'"
    write_info "V√©rifiez les noms ou d√©ployez d'abord le conteneur avec:"
    write_color "./deploy-azure.sh --container-registry-name 'votre-registre'" "gray"
    exit 1
fi

# Ex√©cuter l'action demand√©e
case "$ACTION" in
    "status")
        get_container_status
        ;;
    "logs")
        get_container_logs
        ;;
    "restart")
        restart_container
        ;;
    "stop")
        stop_container
        ;;
    "start")
        start_container
        ;;
    "update")
        update_container
        ;;
    "delete")
        remove_deployment
        ;;
esac 