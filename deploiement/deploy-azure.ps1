#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Script de d√©ploiement Azure pour le serveur MCP Weather
.DESCRIPTION
    Ce script d√©ploie automatiquement le serveur MCP Weather sur Azure Container Instances
    en utilisant Azure CLI et Azure Container Registry
.PARAMETER ResourceGroupName
    Nom du groupe de ressources Azure (par d√©faut: mcp-weather-rg)
.PARAMETER Location
    R√©gion Azure pour le d√©ploiement (par d√©faut: France Central)
.PARAMETER ContainerRegistryName
    Nom du registre de conteneurs Azure (doit √™tre unique globalement)
.PARAMETER ContainerInstanceName
    Nom de l'instance de conteneur (par d√©faut: mcp-weather-server)
.EXAMPLE
    .\deploy-azure.ps1 -ContainerRegistryName "monregistreunique123"
#>

param(
    [Parameter(Mandatory=$false)]
    [string]$ResourceGroupName = "mcp-weather-rg",
    
    [Parameter(Mandatory=$false)]
    [string]$Location = "francecentral",
    
    [Parameter(Mandatory=$true)]
    [string]$ContainerRegistryName,
    
    [Parameter(Mandatory=$false)]
    [string]$ContainerInstanceName = "mcp-weather-server",
    
    [Parameter(Mandatory=$false)]
    [string]$ImageTag = "latest"
)

# Configuration des couleurs pour les messages
$ErrorActionPreference = "Stop"
$ProgressPreference = "Continue"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Write-Step {
    param([string]$Message)
    Write-ColorOutput "üîÑ $Message" "Cyan"
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è  $Message" "Yellow"
}

# V√©rification des pr√©requis
Write-ColorOutput "üå§Ô∏è  D√©ploiement du serveur MCP Weather sur Azure" "Magenta"
Write-ColorOutput "=================================================" "Magenta"

Write-Step "V√©rification des pr√©requis..."

# V√©rifier si Azure CLI est install√©
try {
    $azVersion = az version --output json | ConvertFrom-Json
    Write-Success "Azure CLI version $($azVersion.'azure-cli') d√©tect√©"
} catch {
    Write-Error "Azure CLI n'est pas install√©. Veuillez l'installer depuis https://docs.microsoft.com/cli/azure/install-azure-cli"
    exit 1
}

# V√©rifier si Docker est install√©
try {
    $dockerVersion = docker --version
    Write-Success "Docker d√©tect√©: $dockerVersion"
} catch {
    Write-Error "Docker n'est pas install√©. Veuillez l'installer depuis https://www.docker.com/products/docker-desktop"
    exit 1
}

# V√©rifier si l'utilisateur est connect√© √† Azure
Write-Step "V√©rification de la connexion Azure..."
try {
    $account = az account show --output json | ConvertFrom-Json
    Write-Success "Connect√© √† Azure avec le compte: $($account.user.name)"
    Write-ColorOutput "Abonnement actuel: $($account.name) ($($account.id))" "Yellow"
} catch {
    Write-Error "Vous n'√™tes pas connect√© √† Azure. Ex√©cutez 'az login' pour vous connecter."
    exit 1
}

# Demander confirmation pour continuer
$confirmation = Read-Host "Voulez-vous continuer avec cet abonnement? (o/N)"
if ($confirmation -ne "o" -and $confirmation -ne "O" -and $confirmation -ne "oui") {
    Write-Warning "D√©ploiement annul√© par l'utilisateur."
    exit 0
}

# Variables d√©riv√©es
$acrLoginServer = "$ContainerRegistryName.azurecr.io"
$imageName = "$acrLoginServer/mcp-weather-server"
$imageFullName = "$imageName`:$ImageTag"

Write-ColorOutput "`nüìã Configuration du d√©ploiement:" "Yellow"
Write-ColorOutput "  ‚Ä¢ Groupe de ressources: $ResourceGroupName" "White"
Write-ColorOutput "  ‚Ä¢ R√©gion: $Location" "White"
Write-ColorOutput "  ‚Ä¢ Registre de conteneurs: $ContainerRegistryName" "White"
Write-ColorOutput "  ‚Ä¢ Instance de conteneur: $ContainerInstanceName" "White"
Write-ColorOutput "  ‚Ä¢ Image: $imageFullName" "White"

# √âtape 1: Cr√©er le groupe de ressources
Write-Step "Cr√©ation du groupe de ressources '$ResourceGroupName'..."
try {
    $rgExists = az group exists --name $ResourceGroupName --output tsv
    if ($rgExists -eq "true") {
        Write-Success "Le groupe de ressources '$ResourceGroupName' existe d√©j√†"
    } else {
        az group create --name $ResourceGroupName --location $Location --output none
        Write-Success "Groupe de ressources '$ResourceGroupName' cr√©√© avec succ√®s"
    }
} catch {
    Write-Error "Erreur lors de la cr√©ation du groupe de ressources: $_"
    exit 1
}

# √âtape 2: Cr√©er Azure Container Registry
Write-Step "Cr√©ation d'Azure Container Registry '$ContainerRegistryName'..."
try {
    $acrExists = az acr show --name $ContainerRegistryName --resource-group $ResourceGroupName --output none 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Le registre de conteneurs '$ContainerRegistryName' existe d√©j√†"
    } else {
        az acr create --resource-group $ResourceGroupName --name $ContainerRegistryName --sku Basic --admin-enabled true --output none
        Write-Success "Registre de conteneurs '$ContainerRegistryName' cr√©√© avec succ√®s"
    }
} catch {
    Write-Error "Erreur lors de la cr√©ation du registre de conteneurs: $_"
    exit 1
}

# √âtape 3: Se connecter au registre de conteneurs
Write-Step "Connexion au registre de conteneurs..."
try {
    az acr login --name $ContainerRegistryName
    Write-Success "Connexion au registre de conteneurs r√©ussie"
} catch {
    Write-Error "Erreur lors de la connexion au registre de conteneurs: $_"
    exit 1
}

# √âtape 4: Construire et pousser l'image Docker
Write-Step "Construction de l'image Docker..."
try {
    # V√©rifier que le Dockerfile existe
    if (-not (Test-Path "Dockerfile")) {
        Write-Error "Dockerfile non trouv√© dans le r√©pertoire courant"
        exit 1
    }
    
    docker build -t $imageName .
    Write-Success "Image Docker construite avec succ√®s"
} catch {
    Write-Error "Erreur lors de la construction de l'image Docker: $_"
    exit 1
}

Write-Step "Ajout du tag et push vers Azure Container Registry..."
try {
    docker tag $imageName $imageFullName
    docker push $imageFullName
    Write-Success "Image pouss√©e vers ACR avec succ√®s"
} catch {
    Write-Error "Erreur lors du push vers ACR: $_"
    exit 1
}

# √âtape 5: Obtenir les identifiants du registre
Write-Step "R√©cup√©ration des identifiants du registre..."
try {
    $acrCredentials = az acr credential show --name $ContainerRegistryName --output json | ConvertFrom-Json
    $acrUsername = $acrCredentials.username
    $acrPassword = $acrCredentials.passwords[0].value
    Write-Success "Identifiants du registre r√©cup√©r√©s"
} catch {
    Write-Error "Erreur lors de la r√©cup√©ration des identifiants: $_"
    exit 1
}

# √âtape 6: D√©ployer sur Azure Container Instances
Write-Step "D√©ploiement sur Azure Container Instances..."
try {
    # Supprimer l'instance existante si elle existe
    $aciExists = az container show --resource-group $ResourceGroupName --name $ContainerInstanceName --output none 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Warning "Instance de conteneur existante d√©tect√©e. Suppression..."
        az container delete --resource-group $ResourceGroupName --name $ContainerInstanceName --yes --output none
        Write-Success "Instance existante supprim√©e"
    }
    
    # Cr√©er la nouvelle instance
    $deployResult = az container create `
        --resource-group $ResourceGroupName `
        --name $ContainerInstanceName `
        --image $imageFullName `
        --registry-login-server $acrLoginServer `
        --registry-username $acrUsername `
        --registry-password $acrPassword `
        --cpu 1 `
        --memory 1 `
        --os-type Linux `
        --restart-policy Always `
        --environment-variables PYTHONUNBUFFERED=1 PYTHONPATH=/app `
        --ports 8000 `
        --protocol TCP `
        --dns-name-label $ContainerInstanceName `
        --output json 2>&1
    
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Erreur lors du d√©ploiement: $deployResult"
        exit 1
    }
    
    Write-Success "Instance de conteneur d√©ploy√©e avec succ√®s"
} catch {
    Write-Error "Erreur lors du d√©ploiement sur ACI: $_"
    exit 1
}

# √âtape 7: Obtenir les informations de d√©ploiement
Write-Step "R√©cup√©ration des informations de d√©ploiement..."
try {
    # Attendre un peu que le conteneur soit compl√®tement d√©ploy√©
    Start-Sleep -Seconds 10
    
    $containerInfo = az container show --resource-group $ResourceGroupName --name $ContainerInstanceName --output json | ConvertFrom-Json
    
    if (-not $containerInfo) {
        Write-Error "Impossible de r√©cup√©rer les informations du conteneur"
        exit 1
    }
    
    $publicIP = $containerInfo.ipAddress.ip
    $fqdn = $containerInfo.ipAddress.fqdn
    $state = $containerInfo.instanceView.currentState.state
    
    Write-Success "D√©ploiement termin√© avec succ√®s!"
    
    Write-ColorOutput "`nüéâ Informations de d√©ploiement:" "Green"
    Write-ColorOutput "================================" "Green"
    Write-ColorOutput "  ‚Ä¢ Nom de l'instance: $ContainerInstanceName" "White"
    Write-ColorOutput "  ‚Ä¢ √âtat: $state" "White"
    Write-ColorOutput "  ‚Ä¢ Adresse IP publique: $publicIP" "White"
    if ($fqdn) {
        Write-ColorOutput "  ‚Ä¢ FQDN: $fqdn" "White"
        Write-ColorOutput "  ‚Ä¢ URL d'acc√®s: http://$fqdn`:8000" "White"
    }
    Write-ColorOutput "  ‚Ä¢ Groupe de ressources: $ResourceGroupName" "White"
    Write-ColorOutput "  ‚Ä¢ Registre de conteneurs: $acrLoginServer" "White"
    
} catch {
    Write-Error "Erreur lors de la r√©cup√©ration des informations: $_"
    exit 1
}

# √âtape 8: Afficher les commandes utiles
Write-ColorOutput "`nüõ†Ô∏è  Commandes utiles:" "Yellow"
Write-ColorOutput "=====================" "Yellow"
Write-ColorOutput "Voir les logs:" "White"
Write-ColorOutput "  az container logs --resource-group $ResourceGroupName --name $ContainerInstanceName --follow" "Gray"
Write-ColorOutput "`nRed√©marrer le conteneur:" "White"
Write-ColorOutput "  az container restart --resource-group $ResourceGroupName --name $ContainerInstanceName" "Gray"
Write-ColorOutput "`nSupprimer le d√©ploiement:" "White"
Write-ColorOutput "  az group delete --name $ResourceGroupName --yes --no-wait" "Gray"
Write-ColorOutput "`nVoir l'√©tat du conteneur:" "White"
Write-ColorOutput "  az container show --resource-group $ResourceGroupName --name $ContainerInstanceName --output table" "Gray"

Write-ColorOutput "`n‚ú® D√©ploiement termin√© avec succ√®s!" "Green"
Write-ColorOutput "Votre serveur MCP Weather est maintenant disponible sur Azure!" "Green" 