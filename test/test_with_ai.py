#!/usr/bin/env python3
"""
Test du serveur MCP Weather avec un client IA
Ce script configure le serveur MCP pour √™tre utilis√© avec Claude ou OpenAI
"""

import json
import os
import subprocess
import sys
from pathlib import Path

print("ü§ñ Configuration MCP pour IA (Claude/OpenAI)")
print("=" * 50)


def check_docker_container():
    """V√©rifie si le container Docker est actif"""
    try:
        result = subprocess.run(
            "docker ps --filter name=mcp-weather-server --format '{{.Names}}'",
            shell=True, capture_output=True, text=True
        )
        return "mcp-weather-server" in result.stdout
    except:
        return False


def create_mcp_config():
    """Cr√©e la configuration MCP pour Claude Desktop"""

    # Chemin vers le workspace actuel
    workspace_path = Path.cwd().absolute()

    # Configuration MCP pour Claude Desktop
    mcp_config = {
        "mcpServers": {
            "weather-server": {
                "command": "python",
                "args": ["-m", "src.main"],
                "cwd": str(workspace_path),
                "env": {
                    "PYTHONPATH": str(workspace_path),
                    "PYTHONUNBUFFERED": "1"
                }
            }
        }
    }

    # Chemin de configuration Claude Desktop (Windows)
    claude_config_dir = Path.home() / "AppData" / "Roaming" / "Claude"
    claude_config_file = claude_config_dir / "claude_desktop_config.json"

    print(f"1. Configuration MCP pour Claude Desktop...")
    print(f"   Workspace: {workspace_path}")
    print(f"   Config file: {claude_config_file}")

    try:
        # Cr√©er le r√©pertoire si n√©cessaire
        claude_config_dir.mkdir(parents=True, exist_ok=True)

        # Lire la configuration existante ou cr√©er une nouvelle
        existing_config = {}
        if claude_config_file.exists():
            try:
                with open(claude_config_file, 'r', encoding='utf-8') as f:
                    existing_config = json.load(f)
            except:
                pass

        # Fusionner les configurations
        if "mcpServers" not in existing_config:
            existing_config["mcpServers"] = {}

        existing_config["mcpServers"]["weather-server"] = mcp_config["mcpServers"]["weather-server"]

        # √âcrire la configuration
        with open(claude_config_file, 'w', encoding='utf-8') as f:
            json.dump(existing_config, f, indent=2, ensure_ascii=False)

        print("   ‚úÖ Configuration Claude Desktop mise √† jour")
        return True

    except Exception as e:
        print(f"   ‚ùå Erreur configuration Claude: {e}")
        return False


def create_openai_config():
    """Cr√©e un exemple de configuration pour OpenAI/autres clients MCP"""

    workspace_path = Path.cwd().absolute()

    config_example = {
        "name": "Weather MCP Server",
        "description": "Serveur MCP pour donn√©es m√©t√©o factices",
        "command": ["python", "-m", "src.main"],
        "cwd": str(workspace_path),
        "env": {
            "PYTHONPATH": str(workspace_path),
            "PYTHONUNBUFFERED": "1"
        },
        "usage": {
            "tools": [
                {
                    "name": "get_weather",
                    "description": "R√©cup√®re les conditions m√©t√©orologiques pour une ville",
                    "parameters": {
                        "city": "Nom de la ville (requis)",
                        "unit": "Unit√© de temp√©rature: celsius ou fahrenheit (optionnel)"
                    },
                    "example": "get_weather(city='Paris', unit='celsius')"
                }
            ]
        }
    }

    config_file = Path("mcp_config_example.json")

    print(f"2. Configuration exemple pour autres clients MCP...")
    print(f"   Config file: {config_file}")

    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config_example, f, indent=2, ensure_ascii=False)

        print("   ‚úÖ Fichier de configuration exemple cr√©√©")
        return True

    except Exception as e:
        print(f"   ‚ùå Erreur cr√©ation config exemple: {e}")
        return False


def test_local_server():
    """Test le serveur MCP en local"""
    print("3. Test du serveur MCP en local...")

    try:
        # Test d'import des modules
        sys.path.append('./src')
        from src.server import create_mcp_server
        from src.tools.weather import WeatherTool

        print("   ‚úÖ Modules import√©s avec succ√®s")

        # Test de cr√©ation du serveur
        server = create_mcp_server()
        print("   ‚úÖ Serveur MCP cr√©√© avec succ√®s")

        # Test de l'outil weather
        import asyncio

        async def test_tool():
            tool = WeatherTool()
            result = await tool.execute("Paris", "celsius")
            return result

        result = asyncio.run(test_tool())
        if result["success"]:
            print("   ‚úÖ Outil weather fonctionne")
            print(
                f"   üìä Exemple: {result['data']['city']} - {result['data']['temperature']}{result['data']['unit']}")
        else:
            print(f"   ‚ùå Erreur outil weather: {result.get('error')}")

        return True

    except Exception as e:
        print(f"   ‚ùå Erreur test local: {e}")
        return False


def show_usage_instructions():
    """Affiche les instructions d'utilisation"""
    print("\nüìã Instructions d'utilisation:")
    print("-" * 30)

    print("\nüîµ Avec Claude Desktop:")
    print("   1. Red√©marrez Claude Desktop")
    print("   2. Le serveur 'weather-server' sera disponible")
    print("   3. Utilisez: 'Peux-tu me donner la m√©t√©o de Paris ?'")

    print("\nüü† Avec d'autres clients MCP:")
    print("   1. Utilisez la config dans 'mcp_config_example.json'")
    print("   2. Adaptez selon votre client MCP")

    print("\nüê≥ Mode Docker:")
    docker_available = check_docker_container()
    if docker_available:
        print("   ‚úÖ Container Docker actif")
        print("   üí° Le serveur fonctionne dans le container")
    else:
        print("   üî¥ Container Docker inactif")
        print("   üí° D√©marrez avec: docker-compose up -d")

    print("\nüõ†Ô∏è  Commandes utiles:")
    print("   ‚Ä¢ Test local: python test_with_ai.py")
    print("   ‚Ä¢ Test simple: python test_simple.py")
    print("   ‚Ä¢ Test MCP: python test_mcp_client.py")
    print("   ‚Ä¢ Logs Docker: docker logs mcp-weather-server")


def main():
    """Fonction principale"""

    # Test du serveur local
    local_ok = test_local_server()

    if local_ok:
        # Cr√©ation des configurations
        claude_ok = create_mcp_config()
        openai_ok = create_openai_config()

        if claude_ok or openai_ok:
            print("\nüéâ Configuration termin√©e avec succ√®s!")
        else:
            print("\n‚ö†Ô∏è  Probl√®mes lors de la configuration")
    else:
        print("\n‚ùå Le serveur local ne fonctionne pas correctement")
        print("   V√©rifiez l'installation des d√©pendances:")
        print("   pip install -r requirements.txt")

    # Instructions d'utilisation
    show_usage_instructions()

    print("\n" + "="*50)
    print("üèÅ Configuration termin√©e!")


if __name__ == "__main__":
    main()
